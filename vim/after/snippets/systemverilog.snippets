extends verilog

# Foreach Loop
snippet forea
	foreach (${1}) begin
		${0}
	end
# Do-while statement
snippet dowh
	do begin
		${0}
	end while (${1});
# Combinational always block
snippet alc
	always_comb begin ${1:: statement_label}
		${0}
	end $1
# Sequential logic
snippet alff
	always_ff @(posedge ${1:clk}) begin ${2:: statement_label}
		${0}
	end $2
# Latched logic
snippet all
	always_latch begin ${1:: statement_label}
		${0}
	end $1
# Class
snippet cl
	class ${1:class_name};
		// data or class properties
		${0}

		// initialization
		function new();
		endfunction : new

	endclass : $1
# Typedef structure
snippet types
	typedef struct {
		${0}
	} ${1:name_t};
# Program block
snippet prog
	program ${1:program_name} ();
		${0}
	endprogram : $1
# Interface block
snippet intf
	interface ${1:program_name} ();
		// nets
		${2}
		// clocking
		${3}
		// modports
		${0}
	endinterface : $1
# Clocking Block
snippet clock
	clocking ${1:clocking_name} @(${2:posedge} ${3:clk});
		${0}
	endclocking : $1
# Covergroup construct
snippet cg
	covergroup ${1:group_name} @(${2:posedge} ${3:clk});
		${0}
	endgroup : $1
# Package declaration
snippet pkg
	package ${1:package_name};
		${0}
	endpackage : $1
# ====================================================
# ========== User-defined snippets			   ===========
# ====================================================
# Always block
snippet alw
	always_${1:comb }${2:@(sensitivity) }begin
		${0}
	end
# Fork join
snippet frk
	fork
		${0}
	join${1:_any}
# Constraints
snippet cons
	constraint ${1:name} { ${0} }
# ====================================================
# ======= Universal Verification Methodology  ========
# ====================================================
# UVM class with extended 
snippet ucl
	class ${1:subclass} extends ${2:baseclass};
		// data or class properties
		${0}

		\`uvm_${3:component}_utils(${1})

		// initialization
		function new( string name="${1}"${4:, uvm_component parent });
			super.new( name${5:, parent });
		endfunction : new

	endclass : $1
# Create using factory
snippet ucr
	${1:class_object} = ${2:class_name}::type_id::create( "${1}"${3:, this });
	${0}
# Report with macro `uvm_
snippet urp
	\`uvm_${1:info}( ${2:get_type_name()}, ${3:\$sformatf("}${4:Hello world}${5:", }${9}${6:)}${7:, UVM_}${8:MEDIUM});
	${0}
# Backdoor Flag
snippet ubf
	\/\/ *** BACKDOOR FLAG *** May need to modify here whenever RTL changed!
